#!/bin/sh

agent="Mozilla/5.0 (Windows NT 6.1; Win64; rv:109.0) Gecko/20100101 Firefox/109.0"
if [[ "$OSTYPE" == msys* ]]; then
    lua_script="$APPDATA\mpv\scripts/skip.lua"
else
    lua_script="$HOME/.config/mpv/scripts/skip.lua"
fi

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

update_script() {
    update="$(curl -s -A "$agent" "https://raw.githubusercontent.com/synacktraa/ani-skip/master/ani-skip")" || die "Connection error"
    update="$(printf '%s\n' "$update" | diff -u "$0" -)"
    if [ -z "$update" ]; then
        printf "Script is up to date :)\n"
    else
        if printf '%s\n' "$update" | patch "$0" -; then
            printf "Script has been updated\n"
        else
            die "Can't update for some reason!"
        fi
    fi
    exit 0
}

build_options() {
    #shellcheck disable=SC2016
    : '
    `build_options` builds options for `--script-opts` flag from aniskip metadata
    :param $1: skip type (for e.g.: op, ed, recap)
    :param $2: AniSkip metadata
    '
    greppable='"start_time":([0-9.]+),"end_time":([0-9.]+)},"skip_type":"('$1')"'
    unformatted=$(printf "%s" "$2" | grep -Eo "$greppable")
    printf "%s" "$unformatted" | sed -E 's@'"$greppable"'@skip-\3_start=\1,skip-\3_end=\2@'
}

fetch_mal_id() {
    #shellcheck disable=SC2016
    : '
    `fetch_mal_id` fetches MyAnimeList Identifier of particular anime
    :param $1: name of the anime
    '
    name=$(printf "%s" "$*" | sed 's| (\([0-9]*\) episodes)||')
    keyword=$(printf "%s" "$name" | tr -c '[:alnum:]' ' ' | sed -E 's| |%20|g')
    mal_metadata=$(curl -sL "https://myanimelist.net/search/prefix.json?type=anime&keyword=$keyword" | tr -d "\\" 2>/dev/null)
    name=$(printf "%s\n" "$name" | tr -cs '[:print:]' ' ' | tr -c '[:alnum:]' ' ')
    fzf_nth=$(printf "%s," $(seq 1 "$(printf "%s" "$name" | wc -w)") | sed 's|,$||')
    results=$(printf "%s" "$mal_metadata" | sed 's|},{|\n|g' | sed 's|.*,"name":"||g ; s|","url":".*||g')
    relevant_name=$(printf "%s" "$results" | fzf -i --filter="$name" --nth="$fzf_nth" | head -n1)
    [ -z "$relevant_name" ] && relevant_name=$(printf "%s" "$results" | fzf -i --filter="$name" | head -n1)
    [ -z "$relevant_name" ] && relevant_name=$(printf "%s" "$results" | head -n1)
    printf "%s\n" "$mal_metadata" | sed 's|},{|\n|g' | grep 'name":"'"$relevant_name"'","url":' | sed -nE 's|.*"id":([0-9]{1,9}),.*|\1|p'
}

build_flags() {
    #shellcheck disable=SC2016
    : '
    `build_flags` builds `--script-opts` and `--script` flags for MPV player
    :param $1: MyAnimeList Identifier
    :param $2: Episode number
    '
    [ ! -f "$lua_script" ] && die "'skip.lua' script not found!"

    if [[ "$OS" == *"Windows"* ]]; then
        api_url="https://api.aniskip.com/v1/skip-times/$1/$2?types="
        # Fetch data for op
        ani_skip_metadata_op=$(wget -qO- --connect-timeout=5 --no-check-certificate --user-agent="$agent" "$api_url"op 2>&1)
        found_status_op=$(printf "%s" "$ani_skip_metadata_op" | sed -n 's/.*"found":([^,]*).*/1/p')
        [ "$found_status_op" = "false" ] && op_found=false
        op_options=$(build_options "op" "$ani_skip_metadata_op")

        # Fetch data for ed
        ani_skip_metadata_ed=$(wget -qO- --connect-timeout=5 --no-check-certificate --user-agent="$agent" "$api_url"ed 2>&1)
        found_status_ed=$(printf "%s" "$ani_skip_metadata_ed" | sed -n 's/.*"found":([^,]*).*/1/p')
        [ "$found_status_ed" = "false" ] && ed_found=false
        ed_options=$(build_options "ed" "$ani_skip_metadata_ed")

        # Check if both op and ed are not found
        if [ "$op_found" = false ] && [ "$ed_found" = false ]; then
            die "Skip times not found!"
        fi
    else
        ani_skip_metadata=$(curl -s --connect-timeout 5 -A "$agent" "https://api.aniskip.com/v1/skip-times/$1/$2?types=op&types=ed")
        found_status=$(printf "%s" "$ani_skip_metadata" | sed -n 's/.*"found":([^,]*).*/1/p')
        [ "$found_status" = "false" ] && die "Skip times not found!"

        op_options=$(build_options "op" "$ani_skip_metadata")
        ed_options=$(build_options "ed" "$ani_skip_metadata")
    fi
    [ -n "$op_options" ] && [ -n "$ed_options" ] && op_options="$op_options,"
    skip_flag="--script-opts=$op_options$ed_options '--script=$lua_script'"
}



[ "$#" -eq 1 ] && [ "$1" = "-U" ] && update_script
[ "$#" -ne 2 ] && printf "%s [\"title\"] [ep]\n" "${0##*/}" && exit 0

build_flags "$(fetch_mal_id "$1")" "$2"
printf '%s' "$skip_flag"
